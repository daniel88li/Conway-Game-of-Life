{"version":3,"sources":["Components/Button.js","Components/Controls.js","Components/Canvas.js","App.js","index.js"],"names":["Button","props","className","btnStyle","btnSize","btnColour","onClick","text","Controls","id","onStart","onStop","toggleStroke","Canvas","canvasRef","useRef","gridRef","intervalRef","cellSize","updateSpeed","useState","generation","setGeneration","population","setPopulation","lineFlag","setLineFlag","generationUpdate","grid","cols","rows","nextGen","map","eachRow","row","col","neighbours","i","j","neighbourCol","neighbourRow","currCell","draw","useCallback","context","length","cell","fillStyle","fillRect","strokeStyle","strokeRect","prev","reduce","arr","concat","sum","value","getPopulation","update","current","canvas","getContext","Math","floor","width","height","useEffect","offsetWidth","offsetHeight","Array","fill","random","buildGrid","updateInterval","setInterval","requestAnimationFrame","clearInterval","ref","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7251dcfd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Button(props) {\r\n  return (\r\n    <button\r\n      className={`btn ${props.btnStyle} ${props.btnSize} ${props.btnColour}`}\r\n      onClick={props.onClick}\r\n    >\r\n      {props.text}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nfunction Controls(props) {\r\n  return (\r\n    <div className=\"controls\">\r\n      <Button\r\n        id=\"button-start\"\r\n        btnStyle=\"btn--round\"\r\n        btnSize=\"btn--small\"\r\n        btnColour=\"blue\"\r\n        text=\"Start\"\r\n        onClick={props.onStart}\r\n      />\r\n\r\n      <Button\r\n        id=\"button-start\"\r\n        btnStyle=\"btn--round\"\r\n        btnSize=\"btn--small\"\r\n        btnColour=\"blue\"\r\n        text=\"Stop\"\r\n        onClick={props.onStop}\r\n      />\r\n\r\n      <Button\r\n        id=\"button-canvas-lines\"\r\n        btnStyle=\"btn--round\"\r\n        btnSize=\"btn--small\"\r\n        btnColour=\"blue\"\r\n        text=\"Toggle Lines\"\r\n        onClick={props.toggleStroke}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","import React, { useRef, useEffect, useState, useCallback } from \"react\";\r\nimport Controls from \"./Controls\";\r\n\r\nfunction Canvas(props) {\r\n  const canvasRef = useRef(null);\r\n  const gridRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const cellSize = 10;\r\n  const deadCell = \"white\";\r\n  const aliveCell = \"black\";\r\n  const updateSpeed = \"500\";\r\n  const [generation, setGeneration] = useState(0);\r\n  const [population, setPopulation] = useState(0);\r\n  const [lineFlag, setLineFlag] = useState(true);\r\n\r\n  // build grid and init cell values (dead/alive)\r\n  function buildGrid(cols, rows) {\r\n    const gridArray = new Array(rows)\r\n      .fill(null)\r\n      .map(() =>\r\n        new Array(cols).fill(null).map(() => Math.floor(Math.random() * 2))\r\n      );\r\n    return gridArray;\r\n  }\r\n\r\n  // update grid based on the rules\r\n  function generationUpdate(grid, cols, rows) {\r\n    const nextGen = grid.map((eachRow) => [...eachRow]);\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n      for (let col = 0; col < cols; col++) {\r\n        let neighbours = 0;\r\n\r\n        // check adjacent cells\r\n        for (let i = -1; i <= 1; i++) {\r\n          for (let j = -1; j <= 1; j++) {\r\n            if (i === 0 && j === 0) {\r\n              continue;\r\n            }\r\n            const neighbourCol = col + i;\r\n            const neighbourRow = row + j;\r\n            if (\r\n              neighbourCol >= 0 &&\r\n              neighbourCol < cols &&\r\n              neighbourRow >= 0 &&\r\n              neighbourRow < rows\r\n            ) {\r\n              neighbours += grid[neighbourRow][neighbourCol];\r\n            }\r\n          }\r\n        }\r\n\r\n        // update for next generation\r\n        const currCell = grid[row][col];\r\n        if (currCell === 1 && (neighbours < 2 || neighbours > 3)) {\r\n          nextGen[row][col] = 0;\r\n        } else if (currCell === 0 && neighbours === 3) {\r\n          nextGen[row][col] = 1;\r\n        }\r\n      }\r\n    }\r\n    return nextGen;\r\n  }\r\n\r\n  const draw = useCallback(\r\n    (context, grid) => {\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          const cell = grid[row][col];\r\n          context.fillStyle = cell ? aliveCell : deadCell;\r\n          context.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);\r\n          context.strokeStyle = lineFlag ? \"grey\" : \"white\";\r\n          context.strokeRect(\r\n            col * cellSize,\r\n            row * cellSize,\r\n            cellSize,\r\n            cellSize\r\n          );\r\n        }\r\n      }\r\n      setGeneration((prev) => prev + 1);\r\n      setPopulation(getPopulation(grid));\r\n    },\r\n    [lineFlag]\r\n  );\r\n\r\n  // function clearCanvas(context) {\r\n  //   context.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n  // }\r\n\r\n  const update = useCallback(() => {\r\n    let grid = gridRef.current;\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    const cols = Math.floor(canvas.width / cellSize);\r\n    const rows = Math.floor(canvas.height / cellSize);\r\n    grid = generationUpdate(grid, cols, rows);\r\n    draw(context, grid);\r\n    gridRef.current = grid;\r\n  }, [draw]);\r\n\r\n  // run once on mount\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    canvas.width = canvas.offsetWidth;\r\n    canvas.height = canvas.offsetHeight;\r\n    // console.log(canvas.width, canvas.height);\r\n    const cols = Math.floor(canvas.width / cellSize);\r\n    const rows = Math.floor(canvas.height / cellSize);\r\n    // console.log(cols, rows);\r\n    let grid = buildGrid(cols, rows);\r\n    gridRef.current = grid;\r\n\r\n    draw(context, grid);\r\n\r\n    function update() {\r\n      grid = generationUpdate(grid, cols, rows);\r\n      draw(context, grid);\r\n      gridRef.current = grid;\r\n    }\r\n\r\n    const updateInterval = setInterval(() => {\r\n      requestAnimationFrame(update);\r\n    }, updateSpeed);\r\n    intervalRef.current = updateInterval;\r\n\r\n    return () => clearInterval(updateInterval);\r\n  }, []);\r\n\r\n  const onStart = useCallback(() => {\r\n    onStop();\r\n    const updateInterval = setInterval(() => {\r\n      requestAnimationFrame(update);\r\n    }, updateSpeed);\r\n    intervalRef.current = updateInterval;\r\n  }, [update]);\r\n\r\n  function onStop() {\r\n    clearInterval(intervalRef.current);\r\n  }\r\n\r\n  function toggleStroke() {\r\n    setLineFlag((prev) => !prev);\r\n  }\r\n\r\n  useEffect(() => {\r\n    onStart();\r\n  }, [lineFlag, onStart]);\r\n\r\n  function getPopulation(grid) {\r\n    return grid\r\n      .reduce((arr, row) => arr.concat(row))\r\n      .reduce((sum, value) => sum + value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <canvas id=\"canvas\" ref={canvasRef} {...props} />\r\n      <div className=\"game-stat\">\r\n        <p>Generation: {generation}</p> <p>Population: {population}</p>\r\n      </div>\r\n      <p>Updates every {updateSpeed} ms.</p>\r\n      <Controls onStart={onStart} onStop={onStop} toggleStroke={toggleStroke} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\nimport Canvas from \"./Components/Canvas\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Conway's Game of Life</h1>\r\n      <Canvas />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./dist/css/main.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}